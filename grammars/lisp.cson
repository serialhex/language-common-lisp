name: "Common Lisp"
scopeName: "source.common.lisp"
comment: '''

Awesome Syntax Highlighting for Common Lisp!

'''

fileTypes: [
  'lisp'
  'lsp'
  'asd'
  'cl'
  'l'
  'mud'
  'el'
]

foldingStartMarker: '\\(\\s*$'
foldingStopMarker: '^\\s*\\)'

patterns: [
  {
    include: "#comment"
  }
  {
    include: "#quote"
  }
  {
    include: "#sexp"
  }
  {
    include: "#string"
  }
  {
    include: "#language-functions"
  }
  {
    include: "#constants"
  }
  {
    include: "#illegal"
  }
]


repository:
  comment:
    patterns: [
      {
        captures:
          "1":
            name: "punctuation.definition.comment.common.lisp"
        match: "(;).*$\\n?"
        name: "comment.line.semicolon.common.lisp"
      }
      {
        begin: "#\\|"
        captures:
          "0":
            name: "punctuation.definition.comment.common.lisp"
        end: "\\|#"
        name: "comment.multiline.common.lisp"
      }
    ]
  constants:
    patterns: [
      {
        match: '\\b(t|nil)(?=[\\s;()\'"\\]\\}])'
        name: "constant.language.boolean.common.lisp"
      }
      {
        match: "[\\s](:)([^\\s\\)]*)(?=[\\s\\)])"
        name: "constant.keyword.common.lisp"
      }
      # {
      #   match: {
      #     begin: '(#[cC]\\()'
      #     end: '(\\))(?=[\\s;()\'"\\]\\}])'
      #   }
      #   name: "constant.numeric.complex.common.lisp"
      # }
      {
        include: "#numeric"
      }
    ]
  numeric:
    patterns: [
      {
        match: '(?<![[:alnum:].])(-?\\d+/\\d+)\\b'
        name: 'constant.numeric.ratio.common.lisp'
      }
      {
        match: '(-?\\d*\\.\\d+([dDeEfFlLsS][+-]?\\d+)?)|(-?\\d+(\\.\\d*)?([dDeEfFlLsS][+-]?\\d+))'
        name: 'constant.numeric.float.common.lisp'
      }
      {
        match: '(#[xX]-?[0-9a-fA-F]+)(?=[\\s;()\'"\\]\\}])'
        name: 'constant.numeric.hexadecimal.common.lisp'
      }
      {
        match: '(#[oO]-?[0-7]+)(?=[\\s;()\'"\\]\\}])'
        name: 'constant.numeric.octal.common.lisp'
      }
      {
        match: '(#[bB]-?[01]+)(?=[\\s;()\'"\\]\\}])'
        name: 'constant.numeric.binary.common.lisp'
      }
      {
        match: '(#\\d+[rR]-?[0-9a-zA-Z]+)(?=[\\s;()\'"\\]\\}])'
        name: 'constant.numeric.arbitrary-radix.common.lisp'
      }
      {
        # match: '(?<![\\d.])(-?\\d+\\.?)(?=[\\s;()\'"\\]\\}])'
        match: '(?<![[:alnum:].])(-?\\d+\\.?)(?=[\\s;()\'"\\]\\}])'
        name: 'constant.numeric.integer.common.lisp'
      }
    ]
  illegal:
    match: '[()\\[\\]{}]'
    name: 'invalid.illegal.parenthesis.common.lisp'
  # set this up...
  "language-functions":
    patterns: [
      {
        comment: "flow control"
        match: '''
          (?xi)
              (?<=(\\s|\\()) # preceded by space or (
              ( or|and|else|prog(n|1|2|\\*)?|begin|if|(e|c)?case|when|unless|
                cond|multiple-value-prog1|unwind-protect|block|return(-from)?|
                tagbody|go|catch|throw|sleep)
              (?=(\\s|\\()) # followed by space or (
        '''
        name: "keyword.control.common.lisp"
      }
      {
        comment: "predicates"
        match: '''
          (?xi)
              (?<=(\\s|\\()) # preceded by space or (
              ((/|>|<)?=|>|<|minusp|zerop|plusp|evenp|oddp|numberp|realp|
               rationalp|floatp|integerp|complexp|random-state-p|
               ([[:alpha:]][[:alnum:]!$%&*+-./:<=>?@^_~]*-p) # all `-p`
              )
              (?=(\\s|\\()) # followed by space or (
        '''
        name: "support.function.boolean-test.common.lisp"
      }
      # {
      #   comment: '''
      #
      #         These functions change one type into another.
      #
      #   '''
      #   match: '''
      #     (?xi)
      #         (?<=(\\s|\\()) # preceded by space or (
      #         ( char->integer|exact->inexact|inexact->exact|
      #           integer->char|symbol->string|list->vector|
      #           list->string|identifier->symbol|vector->list|
      #           string->list|string->number|string->symbol|
      #           number->string
      #         )
      #         (?=(\\s|\\()) # followed by space or (
      #
      #   '''
      #   name: "support.function.convert-type.common.lisp"
      # }
      {
        comment: '''

              These functions either generate, or effect bindings.
              Unfortunately the `pset(f|q)` functions and `defparameter` don't
              seem to highlight... which is weird!

        '''
        match: '''
          (?xi)
              (?<=(\\s|\\()) # preceded by space or (
              ( (p)?set(f|q)?|def(constant|var|parameter)|multiple-value-setq|
                shiftf|rotatef|makunbound|get(f)?|get-properties|remprop|remf|
                progv|let(\\*)?|multiple-value-bind|destructuring-bind)
              (?=(\\s|\\()) # followed by space or (
        '''
        name: "storage.control.bindings.common.lisp"
      }
      {
        comment: "numeric functions"
        match: '''
          (?xi)
            (?<=(\\s|\\())
              # general numeric functions
              ([*/+-]|1(\\+|-)|incf|decf|exp|expt|log|sqrt|isqrt|lcm|gcd|
               sin|cos|tan|asin|acos|atan|sinh|cosh|tanh|asinh|acosh|
               atanh|cis|conjugate|max|min|round|fround|floor|ffloor|
               ceiling|fceiling|truncate|ftruncate|mod|rem|random|make|
               float|signum|numerator|denominator|realpart|imagpart|
               complex|phase|abs|rational|rationalize|float
              )
            (?=(\\s|\\())
        '''
        name: "keyword.operator.numeric.common.lisp"
      }
      {
        match: '''
          (?xi)
              (?<=(\\s|\\()) # preceded by space or (
              ( append|apply|approximate|
                construct-identifier|display|
                funcall|force|cd|gen-counter|gen-loser|
                generate-identifier|last-pair|length|
                list|list-ref|list-tail|load|log|
                macro|magnitude|map|map-streams|max|member|memq|
                memv|min|newline|nil|not|peek-char|rationalize|
                read|read-char|return|reverse|sequence|substring|
                truncate|values-list|write|write-char|

                # cons, car, cdr, etc
                cons|c(a|d){1,4}r|

                # ports / files
                call-with-(?:input|output)-file|
                (?:close|current)-(?:input|output)-port|
                with-(?:input|output)-from-file|
                open-(?:input|output)-file|

                # char-Â«fooÂ»
                char-(?:downcase|upcase|ready)|

                # make-Â«fooÂ»
                make-(?:polar|promise|rectangular|string|vector)

                # string-Â«fooÂ», vector-Â«fooÂ»
                string(?:-(?:append|copy|length|ref))?
              )
              (?=(\\s|\\()) # followed by space or (
        '''
        name: "support.function.general.common.lisp"
      }
    ]
  # end of set it up...
  quote:
    patterns: [
      {
        comment: "Quoted symbol 'foo"
        captures:
          "1":
            name: "punctuation.section.quoted.symbol.common.lisp"
        match: "(')\\s*([0-9a-zA-Z!$%&*+-./:<=>?@^_~]+)"
        name: "constant.symbol.common.lisp"
      }
      {
        comment: "Empty list: '()"
        captures:
          "1":
            name: "punctuation.section.quoted.empty-list.common.lisp"
          "2":
            name: "meta.expression.common.lisp"
          "3":
            name: "punctuation.section.expression.begin.common.lisp"
          "4":
            name: "punctuation.section.expression.end.common.lisp"
        match: "(')\\s*((\\()\\s*(\\)))"
        name: "constant.other.empty-list.common.lisp"
      }
      {
        coment: "This is for quoted lists: '(foo bar baz)"
        begin: "('\\()"
        beginCaptures:
          "1":
            name: "punctuation.section.quoted.common.lisp"
        end: "(\\))(\\n)?"
        name: "constant.other.quoted-object.common.lisp"
        patterns: [
          {
            include: "#quoted"
          }
        ]
      }
    ]
  "quote-sexp":
    begin: "(?<=\\()\\s*(quote)\\b\\s*"
    beginCaptures:
      "1":
        name: "keyword.control.quote.common.lisp"
    contentName: "constant.other.quote.common.lisp"
    end: "(?=[)])"
    patterns: [
      {
        include: "#quoted"
      }
    ]
  quoted:
    patterns: [
      {
        include: "#comment"
      }
      {
        include: "#string"
      }
      {
        include: "#constants"
      }
      {
        begin: "(\\()"
        beginCaptures:
          "1":
            name: "punctuation.section.expression.begin.common.lisp"
        end: "(\\))"
        endCaptures:
          "1":
            name: "punctuation.section.expression.end.common.lisp"
        name: "meta.expression.quoted.common.lisp"
        patterns: [
          {
            include: "#quoted"
          }
        ]
      }
      {
        include: "#quote"
      }
      {
        include: "#illegal"
      }
    ]
  sexp:
    begin: "(\\()"
    beginCaptures:
      "1":
        name: "punctuation.section.expression.begin.common.lisp"
    end: "(\\))(\\n)?"
    endCaptures:
      "1":
        name: "punctuation.section.expression.end.common.lisp"
      "2":
        name: "meta.after-expression.common.lisp" # maybe not needed?
    name: "meta.expression.common.lisp"
    patterns: [
      {
        include: "#comment"
      }
      {
        begin: '''(?xi)
          (?<=\\()
          (lambda)\\s+
            (\\(\\s*
              ((
                [^()\\s]+[\\n\\s]*|
                \\([^()\\s]+\\s+[^()\\s]+\\)[\\n\\s]*
               )*)
            \\))
        '''
        captures:
          "1":
            name: "keyword.control.common.lisp"
          "3":
            name: "variable.parameter.common.lisp"
        end: "(?=\\))"
        name: "meta.declaration.procedure.common.lisp"
        patterns: [
          {
            include: "#comment"
          }
          {
            include: "#constants"
          }
          {
            include: "#string"
          }
          {
            include: "#quote"
          }
          {
            include: "#sexp"
          }
          {
            include: "#illegal"
          }
        ]
      }
      {
        begin: '''(?xi)
          (?<=\\()
          (defstruct)\\s+
        '''
        captures:
          "1":
            name: "storage.type.structure.common.lisp"
        end: "(?=\\))"
        name: "meta.declaration.structure.common.lisp"
        patterns: [
          # extend this so it's proper...
          {
            include: "#comment"
          }
          {
            include: "#constants"
          }
          {
            include: "#string"
          }
          {
            include: "#quote"
          }
          {
            include: "#sexp"
          }
          {
            include: "#illegal"
          }
        ]
      }
      {
        begin: '''(?xi)
          (?<=\\()
          (def[\\S]*)\\s+
          ([\\S]*)\\s+
            (\\(\\s*
              ((
                [^()\\s]+[\\n\\s]*|
                \\([^()\\s]+\\s+[^()\\s]+\\)[\\n\\s]*
               )*)
            \\))
        '''
        captures:
          "1":
            name: "keyword.control.common.lisp"
          "2":
            name: "entity.name.function.common.lisp"
          "4":
            name: "variable.parameter.common.lisp"
        end: "(?=\\))"
        name: "meta.declaration.procedure.common.lisp"
        patterns: [
          {
            include: "#comment"
          }
          {
            include: "#constants"
          }
          {
            include: "#string"
          }
          {
            include: "#quote"
          }
          {
            include: "#sexp"
          }
          {
            include: "#illegal"
          }
        ]
      }
      {
        include: "#quote-sexp"
      }
      {
        include: "#quote"
      }
      {
        include: "#comment"
      }
      {
        include: "#language-functions"
      }
      {
        include: "#string"
      }
      {
        include: "#constants"
      }
      {
        include: "#sexp"
      }
    ]
  string:
    patterns: [
      {
        match: '#\\\\(Space|Backspace|Tab|Rubout|Linefeed|Return|Page|Newline|.)(?=\\s)'
        name: "string.character.common.lisp"
      }
      {
        begin: "(\")"
        beginCaptures:
          "1":
            name: "punctuation.definition.string.begin.common.lisp"
        end: "(\")"
        endCaptures:
          "1":
            name: "punctuation.definition.string.end.common.lisp"
        name: "string.quoted.double.common.lisp"
        patterns: [
          {
            match: "\\\\."
            name: "constant.character.escape.common.lisp"
          }
        ]
      }
    ]
